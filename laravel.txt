1. php artisan install:api
2.
model/user.php
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasApiTokens, HasFactory, Notifiable;
}

3. php artisan make:controller Auth/AuthController

<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\LoginRequest;
use App\Http\Requests\RegisterRequest;
use App\Models\User;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    public function login(LoginRequest $request){
        try {
            $validated = $request->safe()->all();
            if(!Auth::attempt($validated)){
                return response()->json([
                'message' => 'Provided credentials are not registered!'
            ], 401);
            }

            $user = $request->user();
            $token = $user->createToken('api-token', ['*'])->plainTextToken;
            return response()->json([
                'message' => 'Login Successful!',
                'token' => $token,
                'user' => $user
            ], 200);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Login Failed!',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function register(RegisterRequest $request){
        try {
            $validated = $request->safe()->all();
            $validated['password'] = Hash::make($validated['password']);
            $user = User::create($validated);
            return response()->json([
                'message' => 'User Successfully Registered!',
                'user' => $user,
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Registration Failed!',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    public function logout(Request $request){
        try {
            $request->user()->currentAccessToken()->delete();
            return response()->json([
                'message' => 'Successfully Logout',
                'data' => 'Test'
            ], 200);
        } catch (Exception $e) {
            return response()->json([
                'message' => $e->getMessage(),
                'data' => 'Test'
            ], 500);
        }
    }
}





4. php artisan make:request RegisterRequest + LoginRequest

5. RegisterRequest

<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;

class RegisterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return Auth::guest();
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => 'required|string',
            'email' => 'required|email|unique:users',
            'password' => 'required|min:8|confirmed',
        ];
    }
}

6. LoginRequest
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return Auth::guest();
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => 'required|email',
            'password' => 'required',
        ];
    }
}


7. 
<?php

use App\Http\Controllers\Auth\AuthController;
use App\Http\Controllers\ReviewController;
use App\Http\Controllers\SpotController;
use App\Models\Category;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');

Route::get('/category', function (Request $request) {
    return Category::all();
})->middleware('auth:sanctum');

Route::middleware('guest')->group(function () {
    Route::post('register',[AuthController::class, 'register']);   
    Route::post('login',[AuthController::class, 'login']);
});

Route::middleware('auth:sanctum')->group(function (){
    Route::get('spot/review/{spot}',[SpotController::class, 'review']);
    Route::post('logout',[AuthController::class, 'logout']);
    Route::apiResource('spot', SpotController::class);
    Route::apiResource('review', ReviewController::class)
    ->only([
        'index',
        'store',
        'destroy'
    ])
    ->middlewareFor(['store'], 'ensureUserHasRole:user')
    ->middlewareFor(['destroy'], 'ensureUserHasRole:admin');
    
});



8. php artisan make:model -mcr -R
9. php artisan make:model -mcr -R --api

10. php artisan make:middleware EnsureUserHasRoleMiddleware
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class EnsureUserHasRoleMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string $role): Response
    {

        if($request->user()->role != $role){
            return response()->json([
                'Message' => "Unauthorized",
                'data' => $request->user()->role,
            ], 403);
        }
        return $next($request);
    }
}

11. bootstrap App
<?php

use App\Http\Middleware\EnsureUserHasRoleMiddleware;
use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware): void {
        $middleware->alias([
           'ensureUserHasRole' => EnsureUserHasRoleMiddleware::class, 
        ]);
    })
    ->withExceptions(function (Exceptions $exceptions): void {
        //
    })->create();

